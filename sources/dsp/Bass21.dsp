import("stdfaust.lib");

declare author "JPC";
declare license "AGPL-3.0-or-later";
//NOTE: requires -double

process = bass21(pregain, level, blend, presence, drive, bass, treble) with {
  begin = checkbox("[0] begin");
  pregain = hslider("[1] pregain", 0.5, 0.0, 1.0, 0.001) : si.smooth(pole);
  level = hslider("[2] level", 0.5, 0.0, 1.0, 0.001) : si.smooth(pole);
  blend = hslider("[3] blend", 0.5, 0.0, 1.0, 0.001) : si.smooth(pole);
  presence = hslider("[4] presence", 0.5, 0.0, 1.0, 0.001) : si.polySmooth(begin, pole, 0);
  drive = hslider("[5] drive", 0.5, 0.0, 1.0, 0.001) : si.polySmooth(begin, pole, 0);
  bass = hslider("[6] bass", 0.5, 0.0, 1.0, 0.001) : si.polySmooth(begin, pole, 0);
  treble = hslider("[7] treble", 0.5, 0.0, 1.0, 0.001) : si.polySmooth(begin, pole, 0);
  pole = ba.tau2pole(50e-3/6.91);
};

//------------------------------------------------------------------------------
// Circuit
//------------------------------------------------------------------------------

bass21(pregain, level, blend, presence, drive, bass, treble) =
  *(pregain)
  : bass21Input
  <: ((_
       : bass21RCNetwork1
       : bass21Presence(presence) : bass21Clip
       : bass21Drive(drive) : bass21Clip
       : bass21MysteryActiveFilter
       : bass21RCNetwork2
       : bass21ActiveSimple1
       : bass21HPF
       : *(blend)),
      *(1.0-blend))
  :> +
  : *(level)
  : bass21ActiveSimple2 : bass21Clip
  : bass21EQ(bass, treble) : bass21Clip
  : bass21HPF;

//------------------------------------------------------------------------------
// Distortions
//------------------------------------------------------------------------------

// TODO the overdrive sections
//bass21Clip = atan;
//bass21Clip = ma.tanh;
//bass21Clip = ef.cubicnl(0.0, 0.0);
bass21Clip(x) = y with {
  y = table(i0)+(ixf-float(i0))*(table(i1)-table(i0));
  ixf = ((x-xmin)*(float(tsize-1)/(xmax-xmin))) : max(0.0) : min(tsize-1);
  i0 = int(ixf);
  i1 = (i0+1) : min(tsize-1);
  table = rdtable(tsize, ma.tanh((float(ba.time)/float(tsize-1))*(xmax-xmin)+xmin));
  xmin = -4.0;
  xmax = 4.0;
  tsize = 128;
};

//------------------------------------------------------------------------------
// Subcircuits
//------------------------------------------------------------------------------

bass21HPF = _ /*NOTE: negligible RC high-pass*/
  //fi.highpass(1, f)
with {
  f = 1.0/(2.0*ma.PI*R*C);
  R = 100e3;
  C = 2.2e-6;
};

bass21Input = _ /*NOTE: negligible input buffer*/
  //analogBiquad(B0, B1, B2, A0, A1, A2)
with {
  R1 = 10e3;
  R2 = 1e6;
  C1 = 22e-9;

  B0 = 0.0;
  B1 = C1*R2;
  B2 = 0.0;
  A0 = 1.0;
  A1 = C1*R2+C1*R1;
  A2 = 0.0;
};

bass21Presence(param) = analogBiquad(B0, B1, B2, A0, A1, A2) with {
  R1 = 330e3;
  C1 = 220e-12;
  R2 = 3.3e3;
  C2 = 10e-9;
  Rp = 100e3*(1.0-param);

  B0 = 1.0;
  B1 = C2*(Rp+R2)+R1*C1+R1*C2;
  B2 = R1*C1*(Rp+R2)*C2;
  A0 = 1.0;
  A1 = C2*(Rp+R2)+R1*C1;
  A2 = R1*C1*(Rp+R2)*C2;
};

bass21Drive(param) = analogBiquad(B0, B1, B2, A0, A1, A2) with {
  R1 = 330e3;
  C1 = 220e-12;
  R2 = 3.3e3;
  Rp = 100e3*(1.0-param);

  B0 = R1+R2+Rp;
  B1 = C1*R1*(R2+Rp);
  B2 = 0.0;
  A0 = R2+Rp;
  A1 = C1*R1*(R2+Rp);
  A2 = 0.0;
};

bass21RCNetwork1 =
  analogThirdOrder(B0, B1, B2, B3, A0, A1, A2, A3)
  //could also be: fi.tf3slf(B3, B2, B1, B0, A3, A2, A1, A0)
with {
  R1 = 100e3;
  R2 = 2.2e3;
  R3 = 22e3;
  C1 = 22e-9;
  C2 = 22e-9;
  C3 = 22e-9;

  B0 = 1.0;
  B1 = C1*R2+C2*R3+C3*R3+C3*R2;
  B2 = C2*C1*R2*R3+C3*C1*R2*R3+C3*C2*R2*R3;
  B3 = C3*C2*C1*R1*R2*R3;
  A0 = 1.0;
  A1 = C1*R2+C2*R3+C2*R1+C3*R3+C3*R2;
  A2 = C2*C1*R2*R3+C2*C1*R1*R2+C3*C1*R2*R3+C3*C2*R2*R3+C3*C2*R1*R3+C3*C2*R1*R2;
  A3 = C3*C2*C1*R1*R2*R3;
};

bass21RCNetwork2 = analogBiquad(B0, B1, B2, A0, A1, A2) with {
  R1 = 22e3;
  R2 = 6.2e3;
  C1 = 22e-9;
  C2 = 47e-9;

  B0 = 1.0;
  B1 = C1*R2+C2*R2;
  B2 = C2*C1*R1*R2;
  A0 = 1.0;
  A1 = C1*R2+C2*R2+C2*R1;
  A2 = C2*C1*R1*R2;
};

bass21MysteryActiveFilter =
  analogThirdOrder(B0, B1, B2, B3, A0, A1, A2, A3)
  //could also be: fi.tf3slf(B3, B2, B1, B0, A3, A2, A1, A0)
with {
  R1 = 10e3;
  R2 = 22e3;
  R3 = 22e3;
  R4 = 22e3;
  R5 = 10e3;
  C1 = 47e-9;
  C2 = 470e-12;
  C3 = 10e-9;

  B0 = R4;
  B1 = C1*R4*R5;
  B2 = 0.0;
  B3 = 0.0;
  A0 = R4+R1;
  A1 = C1*R4*R5+C1*R2*R4+C1*R1*R5+C1*R1*R4+C1*R1*R2+C2*R3*R4+C2*R2*R4+C2*R1*R4+C2*R1*R3+C2*R1*R2;
  A2 = C2*C1*R3*R4*R5+C2*C1*R2*R4*R5+C2*C1*R2*R3*R4+C2*C1*R1*R4*R5+C2*C1*R1*R3*R5+C2*C1*R1*R3*R4+C2*C1*R1*R2*R5+C2*C1*R1*R2*R3+C3*C2*R2*R3*R4+C3*C2*R1*R3*R4+C3*C2*R1*R2*R3;
  A3 = C3*C2*C1*R2*R3*R4*R5+C3*C2*C1*R1*R3*R4*R5+C3*C2*C1*R1*R2*R3*R5;
};

bass21ActiveSimple1 = analogBiquad(B0, B1, B2, A0, A1, A2) with {
  R1 = 33e3;
  R2 = 39e3;
  C1 = 1e-9;
  C2 = 2.2e-9;

  B0 = 1.0;
  B1 = 0.0;
  B2 = 0.0;
  A0 = 1.0;
  A1 = C1*R2+C1*R1;
  A2 = C2*C1*R1*R2;
};

bass21ActiveSimple2 = *(-1.0*R2/R1)
  /*note: LPF negligible, replaceable by volume boost and inversion*/
  //analogBiquad(B0, B1, B2, A0, A1, A2)
with {
  R1 = 10e3;
  R2 = 22e3;
  C1 = 33e-12;

  B0 = -1.0*R2;
  B1 = 0.0;
  B2 = 0.0;
  A0 = R1;
  A1 = C1*R1*R2;
  A2 = 0.0;
};

bass21EQ(bass_, treble_) =
  analogSixthOrder(B0, B1, B2, B3, B4, B5, B6, A0, A1, A2, A3, A4, A5, A6)
with {
  //formula refers to control values inverted
  bass = 1.0-bass_;
  treble = 1.0-treble_;

  B0 =
    0.0;
  B1 =
    (10000.0)*bass - (11000.0);
  B2 =
    ((4722366482869644988655.0/147573952589676412928.0)*(bass*bass))
    - ((3149228148263694434375.0/147573952589676412928.0)*bass)
    - (598633738680022361533287.0/36893488147419103232000.0);
  B3 = 0.0
       - ((1.0/100.0)*(bass*bass)*treble)
       + ((95513923305516444051222397770391.0/2028240960365167042394725128601600.0)*(bass*bass))
       - ((1.0/100.0)*bass*(treble*treble))
       + ((1.0/50.0)*bass*treble)
       - ((11855575473574492365904017309744059.0/253530120045645880299340641075200000.0)*bass)
       + ((11.0/1000.0)*(treble*treble))
       - ((87.0/10000.0)*treble)
       - (14370594264427299590777634582379451.0/2535301200456458802993406410752000000.0);
  B4 = 0.0
       - ((7486212072260646522045135498046875.0/340282366920938463463374607431768211456.0)*(bass*bass)*(treble*treble))
       + ((4491727243356387913227081298828125.0/340282366920938463463374607431768211456.0)*(bass*bass)*treble)
       + ((43930290233957032614896735927734375.0/2722258935367507707706996859454145691648.0)*(bass*bass))
       + ((7486212072260646522045135498046875.0/340282366920938463463374607431768211456.0)*bass*(treble*treble))
       - ((4491727243356387913227081298828125.0/340282366920938463463374607431768211456.0)*bass*treble)
       - ((43930290233957032614896735927734375.0/2722258935367507707706996859454145691648.0)*bass)
       + ((1497242414452129304409027099609375.0/680564733841876926926749214863536422912.0)*(treble*treble))
       - ((2096139380232981026172637939453125.0/1361129467683753853853498429727072845824.0)*treble)
       - (3988653792100472466945648193359375.0/5444517870735015415413993718908291383296.0);
  B5 =
    ((55263030661574758589267730712890625.0/11417981541647679048466287755595961091061972992.0)*bass*(bass - (1.0))*(0.0 - (1000.0)*(treble*treble) + (700.0)*treble + (333.0)));
  B6 =
    0.0;
  A0 =
    (1120000.0) - (100000.0)*bass;
  A1 =
    ((827159382962765777100875.0/73786976294838206464.0)*bass)
    - ((97398808709186431407275.0/73786976294838206464.0)*(bass*bass))
    + (22486138303994174387839511.0/3689348814741910323200.0);
  A2 =
    ((1.0/10.0)*(bass*bass)*treble)
    - ((554005154673064069875538171729.0/12379400392853802748991242240.0)*(bass*bass))
    + ((1.0/10.0)*bass*(treble*treble))
    - ((11.0/5.0)*bass*treble)
    + ((11172233007643856170213158767360603.0/198070406285660843983859875840000.0)*bass)
    - ((28.0/25.0)*(treble*treble))
    + ((2097.0/1000.0)*treble)
    + (4803318945294176732167021742106863.0/495176015714152109959649689600000.0);
  A3 =
    ((395912635463280607188582045966881.0/324518553658426726783156020576256000.0)*(bass*bass)*(treble*treble))
    - ((924536224793224579754221815612658771.0/83076749736557242056487941267521536000.0)*(bass*bass)*treble)
    - ((507040844370222621749497226472328135711.0/10384593717069655257060992658440192000000.0)*(bass*bass))
    - ((931846978770041617107737440612658771.0/83076749736557242056487941267521536000.0)*bass*(treble*treble))
    + ((877514784442333180710841126228898003.0/41538374868278621028243970633760768000.0)*bass*treble)
    + ((4083733035316798552790018918194514614443.0/83076749736557242056487941267521536000000.0)*bass)
    - ((3611720156421957836512892203189315491.0/1038459371706965525706099265844019200000.0)*(treble*treble))
    + ((47940277510652695890303360485452680333.0/8307674973655724205648794126752153600000.0)*treble)
    + (1936978606034868499295094264265095385289.0/519229685853482762853049632922009600000000.0);
  A4 =
    ((38827074815011218430459499359130859375.0/1393796574908163946345982392040522594123776.0)*(bass*bass)*(treble*treble))
    - ((51068199162681861845266819000244140625.0/1393796574908163946345982392040522594123776.0)*(bass*bass)*treble)
    - ((99107653864029446716585253626748046875.0/11150372599265311570767859136324180752990208.0)*(bass*bass))
    - ((38827074815011218430459499359130859375.0/1393796574908163946345982392040522594123776.0)*bass*(treble*treble))
    + ((51068199162681861845266819000244140625.0/1393796574908163946345982392040522594123776.0)*bass*treble)
    + ((99107653864029446716585253626748046875.0/11150372599265311570767859136324180752990208.0)*bass)
    - ((1585472873686109630191326141357421875.0/696898287454081973172991196020261297061888.0)*(treble*treble))
    + ((16362191671670370027673244476318359375.0/5575186299632655785383929568162090376495104.0)*treble)
    + (54095420370500304200094670353834375.0/696898287454081973172991196020261297061888.0);
  A5 =
    ((1833247147700098857916891574859619140625.0/365375409332725729550921208179070754913983135744.0)*(bass*bass)*(treble*treble))
    - ((9454388675080322685949504375457763671875.0/1461501637330902918203684832716283019655932542976.0)*(bass*bass)*treble)
    - ((500354302003399815320782081071474609375.0/2923003274661805836407369665432566039311865085952.0)*(bass*bass))
    - ((1833247147700098857916891574859619140625.0/365375409332725729550921208179070754913983135744.0)*bass*(treble*treble))
    + ((9454388675080322685949504375457763671875.0/1461501637330902918203684832716283019655932542976.0)*bass*treble)
    + ((500354302003399815320782081071474609375.0/2923003274661805836407369665432566039311865085952.0)*bass)
    - ((3183150566106706671416759490966796875.0/1461501637330902918203684832716283019655932542976.0)*(treble*treble))
    + ((3183150566106706671416759490966796875.0/1461501637330902918203684832716283019655932542976.0)*treble)
    + (840351749452170561254024505615234375.0/11692013098647223345629478661730264157247460343808.0);
  A6 = 0.0
    -((117489690137807889841496944427490234375.0/24519928653854221733733552434404946937899825954937634816.0)*bass*(bass - (1.0))*(0.0 - (1000.0)*(treble*treble) + (1000.0)*treble + (33.0)));
};

//------------------------------------------------------------------------------
// Bilinear transforms
//------------------------------------------------------------------------------

analogBiquad(B0, B1, B2, A0, A1, A2) =
  fi.tf22t(b0/a0, b1/a0, b2/a0, a1/a0, a2/a0)
with {
  // bilinear transform (not prewarped)
  b0 = k*k*B2 + k*B1 + B0;
  b1 = k*k*-2.0*B2 + 2.0*B0;
  b2 = k*k*B2 - k*B1 + B0;
  a0 = k*k*A2 + k*A1 + A0;
  a1 = k*k*-2.0*A2 + 2.0*A0;
  a2 = k*k*A2 - k*A1 + A0;
  k = 2.0*ma.SR;
};

analogThirdOrder(B0, B1, B2, B3, A0, A1, A2, A3) =
  fi.tf3(b0/a0, b1/a0, b2/a0, b3/a0, a1/a0, a2/a0, a3/a0)
with {
  // bilinear transform (not prewarped)
  b0 = k*k*k*B3 + k*k*B2 + B1*k + B0;
  b1 = k*k*k*-3.0*B3 - k*k*B2 + B1*k + 3.0*B0;
  b2 = k*k*k*3.0*B3 - k*k*B2 - B1*k + 3.0*B0;
  b3 = k*k*k*-1.0*B3 + k*k*B2 - B1*k + B0;
  a0 = k*k*k*A3 + k*k*A2 + A1*k + A0;
  a1 = k*k*k*-3.0*A3 - k*k*A2 + A1*k + 3.0*A0;
  a2 = k*k*k*3.0*A3 - k*k*A2 - A1*k + 3.0*A0;
  a3 = k*k*k*-1.0*A3 + k*k*A2 - A1*k + A0;
  k = 2.0*ma.SR;
};

analogSixthOrder(B0, B1, B2, B3, B4, B5, B6, A0, A1, A2, A3, A4, A5, A6) =
  fi.iir((b0/a0, b1/a0, b2/a0, b3/a0, b4/a0, b5/a0, b6/a0),
         (a1/a0, a2/a0, a3/a0, a4/a0, a5/a0, a6/a0))
with {
  // bilinear transform (not prewarped)
  b0 = B6*(k*k*k*k*k*k) + B5*(k*k*k*k*k) + B4*(k*k*k*k) + B3*(k*k*k) + B2*(k*k) + B1*k + B0;
  b1 = -6.0*B6*(k*k*k*k*k*k) - 4.0*B5*(k*k*k*k*k) - 2.0*B4*(k*k*k*k) + 2.0*B2*(k*k) + 4.0*B1*k + 6.0*B0;
  b2 = 15.0*B6*(k*k*k*k*k*k) + 5.0*B5*(k*k*k*k*k) - B4*(k*k*k*k) - 3.0*B3*(k*k*k) - B2*(k*k) + 5.0*B1*k + 15.0*B0;
  b3 = -20.0*B6*(k*k*k*k*k*k) + 4.0*B4*(k*k*k*k) - 4.0*B2*(k*k) + 20.0*B0;
  b4 = 15.0*B6*(k*k*k*k*k*k) - 5.0*B5*(k*k*k*k*k) - B4*(k*k*k*k) + 3.0*B3*(k*k*k) - B2*(k*k) - 5.0*B1*k + 15.0*B0;
  b5 = -6.0*B6*(k*k*k*k*k*k) + 4.0*B5*(k*k*k*k*k) - 2.0*B4*(k*k*k*k) + 2.0*B2*(k*k) - 4.0*B1*k + 6.0*B0;
  b6 = B6*(k*k*k*k*k*k) - B5*(k*k*k*k*k) + B4*(k*k*k*k) - B3*(k*k*k) + B2*(k*k) - B1*k + B0;
  a0 = A6*(k*k*k*k*k*k) + A5*(k*k*k*k*k) + A4*(k*k*k*k) + A3*(k*k*k) + A2*(k*k) + A1*k + A0;
  a1 = -6.0*A6*(k*k*k*k*k*k) - 4.0*A5*(k*k*k*k*k) - 2.0*A4*(k*k*k*k) + 2.0*A2*(k*k) + 4.0*A1*k + 6.0*A0;
  a2 = 15.0*A6*(k*k*k*k*k*k) + 5.0*A5*(k*k*k*k*k) - A4*(k*k*k*k) - 3.0*A3*(k*k*k) - A2*(k*k) + 5.0*A1*k + 15.0*A0;
  a3 = -20.0*A6*(k*k*k*k*k*k) + 4.0*A4*(k*k*k*k) - 4.0*A2*(k*k) + 20.0*A0;
  a4 = 15.0*A6*(k*k*k*k*k*k) - 5.0*A5*(k*k*k*k*k) - A4*(k*k*k*k) + 3.0*A3*(k*k*k) - A2*(k*k) - 5.0*A1*k + 15.0*A0;
  a5 = -6.0*A6*(k*k*k*k*k*k) + 4.0*A5*(k*k*k*k*k) - 2.0*A4*(k*k*k*k) + 2.0*A2*(k*k) - 4.0*A1*k + 6.0*A0;
  a6 = A6*(k*k*k*k*k*k) - A5*(k*k*k*k*k) + A4*(k*k*k*k) - A3*(k*k*k) + A2*(k*k) - A1*k + A0;
  k = 2.0*ma.SR;
};

//------------------------------------------------------------------------------
// Transposed forms II
//------------------------------------------------------------------------------

tf32t(b0,b1,b2,b3,a1,a2,a3) = calc with {
  calc(x) = b0*x+s1' letrec {
    's1 = b1*x-a1*(b0*x+s1)+s2;
    's2 = b2*x-a2*(b0*x+s1)+s3;
    's3 = b3*x-a3*(b0*x+s1);
  };
};

tf42t(b0,b1,b2,b3,b4,a1,a2,a3,a4) = calc with {
  calc(x) = b0*x+s1' letrec {
    's1 = b1*x-a1*(b0*x+s1)+s2;
    's2 = b2*x-a2*(b0*x+s1)+s3;
    's3 = b3*x-a3*(b0*x+s1)+s4;
    's4 = b4*x-a4*(b0*x+s1);
  };
};

tf52t(b0,b1,b2,b3,b4,b5,a1,a2,a3,a4,a5) = calc with {
  calc(x) = b0*x+s1' letrec {
    's1 = b1*x-a1*(b0*x+s1)+s2;
    's2 = b2*x-a2*(b0*x+s1)+s3;
    's3 = b3*x-a3*(b0*x+s1)+s4;
    's4 = b4*x-a4*(b0*x+s1)+s5;
    's5 = b5*x-a5*(b0*x+s1);
  };
};

tf62t(b0,b1,b2,b3,b4,b5,b6,a1,a2,a3,a4,a5,a6) = calc with {
  calc(x) = b0*x+s1' letrec {
    's1 = b1*x-a1*(b0*x+s1)+s2;
    's2 = b2*x-a2*(b0*x+s1)+s3;
    's3 = b3*x-a3*(b0*x+s1)+s4;
    's4 = b4*x-a4*(b0*x+s1)+s5;
    's5 = b5*x-a5*(b0*x+s1)+s6;
    's6 = b6*x-a6*(b0*x+s1);
  };
};

//------------------------------------------------------------------------------
// Filters
//------------------------------------------------------------------------------

symmetric_highshelf(N,Lpi,fx) = fi.highshelf(N,Lpi,sfx) with {
  sfx = ba.if(Lpi>0, fx, fi.highshelf_other_freq(N, ma.neg(Lpi), fx));
};
